// https://github.com/evont/koa-vuessr-middleware

const Koa = require("koa");
const path = require("path");
const fs = require("fs");
const resolve = (file) => path.resolve(__dirname, file);
const { createBundleRenderer } = require("vue-server-renderer");
const Router = require("koa-router");
const router = new Router();
const LRU = require("lru-cache");
const app = new Koa();

const isProd = process.env.NODE_ENV === "production";
const useMicroCache = process.env.MICRO_CACHE !== "false";
const serverInfo =
  `express/${require("express/package.json").version} ` +
  `vue-server-renderer/${require("vue-server-renderer/package.json").version}`;

function createRenderer(bundle, options) {
  return createBundleRenderer(
    bundle,
    Object.assign(options, {
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),
      basedir: resolve("./dist"),
      runInNewContext: false,
    })
  );
}

let renderer;
let readyPromise;
const templatePath = resolve("./src/index.template.html");

if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, "utf-8");
  const bundle = require("./dist/vue-ssr-server-bundle.json");
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require("./dist/vue-ssr-client-manifest.json");
  renderer = createRenderer(bundle, {
    template,
    clientManifest,
  });
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require("./build/setup-koa-dev-server")(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options);
    }
  );
}

const serve = require("koa-static");
// const serve = (path, cache) =>
//   static(resolve(path), {
//     maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
//   });

// app.use(favicon("./public/logo-48.png"));
app.use(serve(resolve("./dist")));
app.use(serve(resolve("./public")));
app.use(serve(resolve("./manifest.json")));
app.use(serve(resolve("./dist/service-worker.js")));

async function render(ctx) {
  console.log(ctx.request.url);
  const s = Date.now();

  // res.setHeader("Content-Type", "text/html");
  // res.setHeader("Server", serverInfo);

  const handleError = (err) => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.code === 404) {
      res.status(404).send("404 | Page Not Found");
    } else {
      // Render Error Page or Redirect
      res.status(500).send("500 | Internal Server Error");
      console.error(`error during render : ${ctx.request.url}`);
      console.error(err.stack);
    }
  };

  const context = {
    title: "Vue HN 2.0", // default title
    url: ctx.request.url,
  };
  let html = await renderer.renderToString(context);
  ctx.body = html;
}

app.use(render);
// router.get("/", async (ctx) => {
//   ctx.body = "这是首页";
// });

// app.use(router.routes()).use(router.allowedMethods());
app.listen(3000);
